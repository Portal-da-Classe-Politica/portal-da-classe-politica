/* tslint:disable */
/* eslint-disable */
/**
 * Portal da Classe Politica API
 * API portal da classe politica
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 *
 * @export
 * @interface GetAbrangency200Response
 */
export interface GetAbrangency200Response {
  /**
   * Indica se a operação foi bem-sucedida.
   * @type {boolean}
   * @memberof GetAbrangency200Response
   */
  success?: boolean;
  /**
   * Mensagem de sucesso.
   * @type {string}
   * @memberof GetAbrangency200Response
   */
  message?: string;
  /**
   *
   * @type {Array<GetAbrangency200ResponseDataInner>}
   * @memberof GetAbrangency200Response
   */
  data?: Array<GetAbrangency200ResponseDataInner>;
}
/**
 *
 * @export
 * @interface GetAbrangency200ResponseDataInner
 */
export interface GetAbrangency200ResponseDataInner {
  /**
   * ID da abrangência.
   * @type {number}
   * @memberof GetAbrangency200ResponseDataInner
   */
  id?: number;
  /**
   * Nome da abrangência.
   * @type {string}
   * @memberof GetAbrangency200ResponseDataInner
   */
  nome?: string;
  /**
   * Descrição da abrangencia
   * @type {string}
   * @memberof GetAbrangency200ResponseDataInner
   */
  descricao?: string;
}
/**
 *
 * @export
 * @interface GetAbrangency500Response
 */
export interface GetAbrangency500Response {
  /**
   * Indica se a operação foi bem-sucedida.
   * @type {boolean}
   * @memberof GetAbrangency500Response
   */
  success?: boolean;
  /**
   * Mensagem de erro.
   * @type {string}
   * @memberof GetAbrangency500Response
   */
  message?: string;
  /**
   * Detalhes do erro.
   * @type {string}
   * @memberof GetAbrangency500Response
   */
  data?: string;
}
/**
 *
 * @export
 * @interface GetCandidate200Response
 */
export interface GetCandidate200Response {
  /**
   *
   * @type {boolean}
   * @memberof GetCandidate200Response
   */
  success?: boolean;
  /**
   *
   * @type {GetCandidate200ResponseData}
   * @memberof GetCandidate200Response
   */
  data?: GetCandidate200ResponseData;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GetCandidate200ResponseData
 */
export interface GetCandidate200ResponseData {
  /**
   *
   * @type {number}
   * @memberof GetCandidate200ResponseData
   */
  candidato_id?: number;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  nome?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  cpf?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  data_nascimento?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  genero?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  raca?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  ocupacao?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  coligacao?: string;
  /**
   *
   * @type {number}
   * @memberof GetCandidate200ResponseData
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  sigla?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  nome_atual?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  class_categ_1?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  class_categ_4?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  class_survey_esp?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  grau_de_instrucao?: string;
  /**
   *
   * @type {number}
   * @memberof GetCandidate200ResponseData
   */
  bens_declarados?: number;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  ultimo_cargo?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  ultima_unidade_eleitoral?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  ultima_situacao_candidatura?: string;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200Response
 */
export interface GetCandidateFilters200Response {
  /**
   *
   * @type {boolean}
   * @memberof GetCandidateFilters200Response
   */
  success?: boolean;
  /**
   *
   * @type {GetCandidateFilters200ResponseData}
   * @memberof GetCandidateFilters200Response
   */
  data?: GetCandidateFilters200ResponseData;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200ResponseData
 */
export interface GetCandidateFilters200ResponseData {
  /**
   *
   * @type {Array<GetCandidateFilters200ResponseDataCargosInner>}
   * @memberof GetCandidateFilters200ResponseData
   */
  cargos?: Array<GetCandidateFilters200ResponseDataCargosInner>;
  /**
   *
   * @type {Array<GetCandidateFilters200ResponseDataGenerosInner>}
   * @memberof GetCandidateFilters200ResponseData
   */
  generos?: Array<GetCandidateFilters200ResponseDataGenerosInner>;
  /**
   *
   * @type {Array<GetCandidateFilters200ResponseDataEstadosInner>}
   * @memberof GetCandidateFilters200ResponseData
   */
  estados?: Array<GetCandidateFilters200ResponseDataEstadosInner>;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200ResponseDataCargosInner
 */
export interface GetCandidateFilters200ResponseDataCargosInner {
  /**
   *
   * @type {number}
   * @memberof GetCandidateFilters200ResponseDataCargosInner
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataCargosInner
   */
  nome?: string;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200ResponseDataEstadosInner
 */
export interface GetCandidateFilters200ResponseDataEstadosInner {
  /**
   *
   * @type {number}
   * @memberof GetCandidateFilters200ResponseDataEstadosInner
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataEstadosInner
   */
  nome?: string;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200ResponseDataGenerosInner
 */
export interface GetCandidateFilters200ResponseDataGenerosInner {
  /**
   *
   * @type {number}
   * @memberof GetCandidateFilters200ResponseDataGenerosInner
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataGenerosInner
   */
  nome?: string;
}
/**
 *
 * @export
 * @interface GetCandidateFilters500Response
 */
export interface GetCandidateFilters500Response {
  /**
   *
   * @type {boolean}
   * @memberof GetCandidateFilters500Response
   */
  success?: boolean;
  /**
   *
   * @type {object}
   * @memberof GetCandidateFilters500Response
   */
  data?: object;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters500Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GetCandidates200Response
 */
export interface GetCandidates200Response {
  /**
   * Indica o sucesso da requisição.
   * @type {boolean}
   * @memberof GetCandidates200Response
   */
  success?: boolean;
  /**
   *
   * @type {GetCandidates200ResponseData}
   * @memberof GetCandidates200Response
   */
  data?: GetCandidates200ResponseData;
  /**
   *
   * @type {string}
   * @memberof GetCandidates200Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GetCandidates200ResponseData
 */
export interface GetCandidates200ResponseData {
  /**
   * Indica a quantidade de candidatos que foram encontrados com os parâmetros.
   * @type {number}
   * @memberof GetCandidates200ResponseData
   */
  totalResults?: number;
  /**
   * Indica a pagina atual.
   * @type {number}
   * @memberof GetCandidates200ResponseData
   */
  currentPage?: number;
  /**
   * Indica a quantidade total de paginas encontradas.
   * @type {number}
   * @memberof GetCandidates200ResponseData
   */
  totalPages?: number;
  /**
   *
   * @type {Array<GetCandidates200ResponseDataResultsInner>}
   * @memberof GetCandidates200ResponseData
   */
  results?: Array<GetCandidates200ResponseDataResultsInner>;
}
/**
 *
 * @export
 * @interface GetCandidates200ResponseDataResultsInner
 */
export interface GetCandidates200ResponseDataResultsInner {
  /**
   *
   * @type {number}
   * @memberof GetCandidates200ResponseDataResultsInner
   */
  lastCandidatoEleicaoId?: number;
  /**
   *
   * @type {string}
   * @memberof GetCandidates200ResponseDataResultsInner
   */
  partido?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidates200ResponseDataResultsInner
   */
  nomeCandidato?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidates200ResponseDataResultsInner
   */
  situacao?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidates200ResponseDataResultsInner
   */
  cargo?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidates200ResponseDataResultsInner
   */
  nomeUrna?: string;
  /**
   *
   * @type {number}
   * @memberof GetCandidates200ResponseDataResultsInner
   */
  ultimaEleicao?: number;
  /**
   *
   * @type {number}
   * @memberof GetCandidates200ResponseDataResultsInner
   */
  candidatoId?: number;
}
/**
 *
 * @export
 * @interface GetCandidates400Response
 */
export interface GetCandidates400Response {
  /**
   *
   * @type {boolean}
   * @memberof GetCandidates400Response
   */
  success?: boolean;
  /**
   *
   * @type {object}
   * @memberof GetCandidates400Response
   */
  data?: object;
  /**
   *
   * @type {string}
   * @memberof GetCandidates400Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GetCandidates500Response
 */
export interface GetCandidates500Response {
  /**
   *
   * @type {boolean}
   * @memberof GetCandidates500Response
   */
  success?: boolean;
  /**
   *
   * @type {object}
   * @memberof GetCandidates500Response
   */
  data?: object;
  /**
   *
   * @type {string}
   * @memberof GetCandidates500Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GetElectoralUnit200Response
 */
export interface GetElectoralUnit200Response {
  /**
   * Indica se a operação foi bem-sucedida.
   * @type {boolean}
   * @memberof GetElectoralUnit200Response
   */
  success?: boolean;
  /**
   * Mensagem de sucesso.
   * @type {string}
   * @memberof GetElectoralUnit200Response
   */
  message?: string;
  /**
   *
   * @type {Array<GetElectoralUnit200ResponseDataInner>}
   * @memberof GetElectoralUnit200Response
   */
  data?: Array<GetElectoralUnit200ResponseDataInner>;
}
/**
 *
 * @export
 * @interface GetElectoralUnit200ResponseDataInner
 */
export interface GetElectoralUnit200ResponseDataInner {
  /**
   * ID da unidade eleitoral.
   * @type {number}
   * @memberof GetElectoralUnit200ResponseDataInner
   */
  id?: number;
  /**
   * Nome da unidade eleitoral.
   * @type {string}
   * @memberof GetElectoralUnit200ResponseDataInner
   */
  nome?: string;
}
/**
 *
 * @export
 * @interface GetElectoralUnit500Response
 */
export interface GetElectoralUnit500Response {
  /**
   * Indica se a operação foi bem-sucedida.
   * @type {boolean}
   * @memberof GetElectoralUnit500Response
   */
  success?: boolean;
  /**
   * Mensagem de erro.
   * @type {string}
   * @memberof GetElectoralUnit500Response
   */
  message?: string;
  /**
   * Detalhes do erro.
   * @type {string}
   * @memberof GetElectoralUnit500Response
   */
  data?: string;
}
/**
 *
 * @export
 * @interface GetUfs200Response
 */
export interface GetUfs200Response {
  /**
   * Indica se a operação foi bem-sucedida.
   * @type {boolean}
   * @memberof GetUfs200Response
   */
  success?: boolean;
  /**
   * Mensagem de sucesso.
   * @type {string}
   * @memberof GetUfs200Response
   */
  message?: string;
  /**
   *
   * @type {Array<GetUfs200ResponseDataInner>}
   * @memberof GetUfs200Response
   */
  data?: Array<GetUfs200ResponseDataInner>;
}
/**
 *
 * @export
 * @interface GetUfs200ResponseDataInner
 */
export interface GetUfs200ResponseDataInner {
  /**
   * Nome da unidade federativa.
   * @type {string}
   * @memberof GetUfs200ResponseDataInner
   */
  sigla_unidade_eleitoral?: string;
}
/**
 *
 * @export
 * @interface GetUfs400Response
 */
export interface GetUfs400Response {
  /**
   * Indica se a operação foi bem-sucedida.
   * @type {boolean}
   * @memberof GetUfs400Response
   */
  success?: boolean;
  /**
   * Mensagem de erro caso escolha abrangencia 2 e nao envie estado.
   * @type {string}
   * @memberof GetUfs400Response
   */
  message?: string;
  /**
   * Detalhes do erro.
   * @type {object}
   * @memberof GetUfs400Response
   */
  data?: object;
}

/**
 * AbrangencyApi - axios parameter creator
 * @export
 */
export const AbrangencyApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Retorna as abrangências disponíveis para candidatos.
     * @summary Obter abrangências disponíveis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAbrangency: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/noauth/abrangency`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AbrangencyApi - functional programming interface
 * @export
 */
export const AbrangencyApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AbrangencyApiAxiosParamCreator(configuration);
  return {
    /**
     * Retorna as abrangências disponíveis para candidatos.
     * @summary Obter abrangências disponíveis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAbrangency(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAbrangency200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAbrangency(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AbrangencyApi.getAbrangency']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AbrangencyApi - factory interface
 * @export
 */
export const AbrangencyApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AbrangencyApiFp(configuration);
  return {
    /**
     * Retorna as abrangências disponíveis para candidatos.
     * @summary Obter abrangências disponíveis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAbrangency(options?: any): AxiosPromise<GetAbrangency200Response> {
      return localVarFp.getAbrangency(options).then(request => request(axios, basePath));
    },
  };
};

/**
 * AbrangencyApi - object-oriented interface
 * @export
 * @class AbrangencyApi
 * @extends {BaseAPI}
 */
export class AbrangencyApi extends BaseAPI {
  /**
   * Retorna as abrangências disponíveis para candidatos.
   * @summary Obter abrangências disponíveis
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbrangencyApi
   */
  public getAbrangency(options?: RawAxiosRequestConfig) {
    return AbrangencyApiFp(this.configuration)
      .getAbrangency(options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * CandidateApi - axios parameter creator
 * @export
 */
export const CandidateApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Busca candidato com base no id
     * @summary Detalhe de candidato pelo id
     * @param {string} candidatoId Id do candidato para detalhe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidate: async (candidatoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'candidatoId' is not null or undefined
      assertParamExists('getCandidate', 'candidatoId', candidatoId);
      const localVarPath = `/noauth/candidate/detail/{candidatoId}`.replace(
        `{${'candidatoId'}}`,
        encodeURIComponent(String(candidatoId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retorna os filtros disponíveis para candidatos.
     * @summary Obter filtros de candidatos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidateFilters: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/noauth/candidate/get-filters`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Busca candidatos com base em parâmetros como nome, UF, abrangência, unidade eleitoral e página.
     * @summary Busca candidatos
     * @param {string} [name] Nome ou nome de urna do candidato
     * @param {string} [uF] Unidade Federativa
     * @param {string} [abrangencyId] ID da abrangência
     * @param {string} [electoralUnitId] ID da unidade eleitoral
     * @param {number} [page] Número da página para paginação
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidates: async (
      name?: string,
      uF?: string,
      abrangencyId?: string,
      electoralUnitId?: string,
      page?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/noauth/candidate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (name !== undefined) {
        localVarQueryParameter['name'] = name;
      }

      if (uF !== undefined) {
        localVarQueryParameter['UF'] = uF;
      }

      if (abrangencyId !== undefined) {
        localVarQueryParameter['abrangencyId'] = abrangencyId;
      }

      if (electoralUnitId !== undefined) {
        localVarQueryParameter['electoralUnitId'] = electoralUnitId;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CandidateApi - functional programming interface
 * @export
 */
export const CandidateApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CandidateApiAxiosParamCreator(configuration);
  return {
    /**
     * Busca candidato com base no id
     * @summary Detalhe de candidato pelo id
     * @param {string} candidatoId Id do candidato para detalhe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCandidate(
      candidatoId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCandidate200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidate(candidatoId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CandidateApi.getCandidate']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retorna os filtros disponíveis para candidatos.
     * @summary Obter filtros de candidatos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCandidateFilters(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCandidateFilters200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidateFilters(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CandidateApi.getCandidateFilters']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Busca candidatos com base em parâmetros como nome, UF, abrangência, unidade eleitoral e página.
     * @summary Busca candidatos
     * @param {string} [name] Nome ou nome de urna do candidato
     * @param {string} [uF] Unidade Federativa
     * @param {string} [abrangencyId] ID da abrangência
     * @param {string} [electoralUnitId] ID da unidade eleitoral
     * @param {number} [page] Número da página para paginação
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCandidates(
      name?: string,
      uF?: string,
      abrangencyId?: string,
      electoralUnitId?: string,
      page?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCandidates200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidates(
        name,
        uF,
        abrangencyId,
        electoralUnitId,
        page,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CandidateApi.getCandidates']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * CandidateApi - factory interface
 * @export
 */
export const CandidateApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = CandidateApiFp(configuration);
  return {
    /**
     * Busca candidato com base no id
     * @summary Detalhe de candidato pelo id
     * @param {string} candidatoId Id do candidato para detalhe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidate(candidatoId: string, options?: any): AxiosPromise<GetCandidate200Response> {
      return localVarFp.getCandidate(candidatoId, options).then(request => request(axios, basePath));
    },
    /**
     * Retorna os filtros disponíveis para candidatos.
     * @summary Obter filtros de candidatos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidateFilters(options?: any): AxiosPromise<GetCandidateFilters200Response> {
      return localVarFp.getCandidateFilters(options).then(request => request(axios, basePath));
    },
    /**
     * Busca candidatos com base em parâmetros como nome, UF, abrangência, unidade eleitoral e página.
     * @summary Busca candidatos
     * @param {string} [name] Nome ou nome de urna do candidato
     * @param {string} [uF] Unidade Federativa
     * @param {string} [abrangencyId] ID da abrangência
     * @param {string} [electoralUnitId] ID da unidade eleitoral
     * @param {number} [page] Número da página para paginação
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidates(
      name?: string,
      uF?: string,
      abrangencyId?: string,
      electoralUnitId?: string,
      page?: number,
      options?: any,
    ): AxiosPromise<GetCandidates200Response> {
      return localVarFp
        .getCandidates(name, uF, abrangencyId, electoralUnitId, page, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * CandidateApi - object-oriented interface
 * @export
 * @class CandidateApi
 * @extends {BaseAPI}
 */
export class CandidateApi extends BaseAPI {
  /**
   * Busca candidato com base no id
   * @summary Detalhe de candidato pelo id
   * @param {string} candidatoId Id do candidato para detalhe
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CandidateApi
   */
  public getCandidate(candidatoId: string, options?: RawAxiosRequestConfig) {
    return CandidateApiFp(this.configuration)
      .getCandidate(candidatoId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Retorna os filtros disponíveis para candidatos.
   * @summary Obter filtros de candidatos
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CandidateApi
   */
  public getCandidateFilters(options?: RawAxiosRequestConfig) {
    return CandidateApiFp(this.configuration)
      .getCandidateFilters(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Busca candidatos com base em parâmetros como nome, UF, abrangência, unidade eleitoral e página.
   * @summary Busca candidatos
   * @param {string} [name] Nome ou nome de urna do candidato
   * @param {string} [uF] Unidade Federativa
   * @param {string} [abrangencyId] ID da abrangência
   * @param {string} [electoralUnitId] ID da unidade eleitoral
   * @param {number} [page] Número da página para paginação
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CandidateApi
   */
  public getCandidates(
    name?: string,
    uF?: string,
    abrangencyId?: string,
    electoralUnitId?: string,
    page?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return CandidateApiFp(this.configuration)
      .getCandidates(name, uF, abrangencyId, electoralUnitId, page, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * ElectoralUnitApi - axios parameter creator
 * @export
 */
export const ElectoralUnitApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Retorna as unidades eleitorais disponíveis para uma determinada abrangência.
     * @summary Obter unidades eleitorais por abrangência
     * @param {number} abrangencyId ID da abrangência.
     * @param {string} [uF] Estado, obrigatório no caso de abrangência municipal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElectoralUnit: async (
      abrangencyId: number,
      uF?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'abrangencyId' is not null or undefined
      assertParamExists('getElectoralUnit', 'abrangencyId', abrangencyId);
      const localVarPath = `/noauth/electoral-unit`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (abrangencyId !== undefined) {
        localVarQueryParameter['abrangencyId'] = abrangencyId;
      }

      if (uF !== undefined) {
        localVarQueryParameter['UF'] = uF;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retorna todas as unidades federativas.
     * @summary Obter unidades federativas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUfs: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/noauth/electoral-unit/get-ufs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ElectoralUnitApi - functional programming interface
 * @export
 */
export const ElectoralUnitApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ElectoralUnitApiAxiosParamCreator(configuration);
  return {
    /**
     * Retorna as unidades eleitorais disponíveis para uma determinada abrangência.
     * @summary Obter unidades eleitorais por abrangência
     * @param {number} abrangencyId ID da abrangência.
     * @param {string} [uF] Estado, obrigatório no caso de abrangência municipal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getElectoralUnit(
      abrangencyId: number,
      uF?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetElectoralUnit200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getElectoralUnit(abrangencyId, uF, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ElectoralUnitApi.getElectoralUnit']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retorna todas as unidades federativas.
     * @summary Obter unidades federativas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUfs(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUfs200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUfs(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ElectoralUnitApi.getUfs']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ElectoralUnitApi - factory interface
 * @export
 */
export const ElectoralUnitApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ElectoralUnitApiFp(configuration);
  return {
    /**
     * Retorna as unidades eleitorais disponíveis para uma determinada abrangência.
     * @summary Obter unidades eleitorais por abrangência
     * @param {number} abrangencyId ID da abrangência.
     * @param {string} [uF] Estado, obrigatório no caso de abrangência municipal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElectoralUnit(
      abrangencyId: number,
      uF?: string,
      options?: any,
    ): AxiosPromise<GetElectoralUnit200Response> {
      return localVarFp.getElectoralUnit(abrangencyId, uF, options).then(request => request(axios, basePath));
    },
    /**
     * Retorna todas as unidades federativas.
     * @summary Obter unidades federativas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUfs(options?: any): AxiosPromise<GetUfs200Response> {
      return localVarFp.getUfs(options).then(request => request(axios, basePath));
    },
  };
};

/**
 * ElectoralUnitApi - object-oriented interface
 * @export
 * @class ElectoralUnitApi
 * @extends {BaseAPI}
 */
export class ElectoralUnitApi extends BaseAPI {
  /**
   * Retorna as unidades eleitorais disponíveis para uma determinada abrangência.
   * @summary Obter unidades eleitorais por abrangência
   * @param {number} abrangencyId ID da abrangência.
   * @param {string} [uF] Estado, obrigatório no caso de abrangência municipal.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElectoralUnitApi
   */
  public getElectoralUnit(abrangencyId: number, uF?: string, options?: RawAxiosRequestConfig) {
    return ElectoralUnitApiFp(this.configuration)
      .getElectoralUnit(abrangencyId, uF, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Retorna todas as unidades federativas.
   * @summary Obter unidades federativas
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElectoralUnitApi
   */
  public getUfs(options?: RawAxiosRequestConfig) {
    return ElectoralUnitApiFp(this.configuration)
      .getUfs(options)
      .then(request => request(this.axios, this.basePath));
  }
}
