/* tslint:disable */
/* eslint-disable */
/**
 * Portal da Classe Politica API
 * API portal da classe politica
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 *
 * @export
 * @interface GetAbrangency200Response
 */
export interface GetAbrangency200Response {
  /**
   * Indica se a operação foi bem-sucedida.
   * @type {boolean}
   * @memberof GetAbrangency200Response
   */
  success?: boolean;
  /**
   * Mensagem de sucesso.
   * @type {string}
   * @memberof GetAbrangency200Response
   */
  message?: string;
  /**
   *
   * @type {Array<GetAbrangency200ResponseDataInner>}
   * @memberof GetAbrangency200Response
   */
  data?: Array<GetAbrangency200ResponseDataInner>;
}
/**
 *
 * @export
 * @interface GetAbrangency200ResponseDataInner
 */
export interface GetAbrangency200ResponseDataInner {
  /**
   * ID da abrangência.
   * @type {number}
   * @memberof GetAbrangency200ResponseDataInner
   */
  id?: number;
  /**
   * Nome da abrangência.
   * @type {string}
   * @memberof GetAbrangency200ResponseDataInner
   */
  nome?: string;
  /**
   * Descrição da abrangencia
   * @type {string}
   * @memberof GetAbrangency200ResponseDataInner
   */
  descricao?: string;
}
/**
 *
 * @export
 * @interface GetAbrangency500Response
 */
export interface GetAbrangency500Response {
  /**
   * Indica se a operação foi bem-sucedida.
   * @type {boolean}
   * @memberof GetAbrangency500Response
   */
  success?: boolean;
  /**
   * Mensagem de erro.
   * @type {string}
   * @memberof GetAbrangency500Response
   */
  message?: string;
  /**
   * Detalhes do erro.
   * @type {string}
   * @memberof GetAbrangency500Response
   */
  data?: string;
}
/**
 *
 * @export
 * @interface GetCandidate200Response
 */
export interface GetCandidate200Response {
  /**
   *
   * @type {boolean}
   * @memberof GetCandidate200Response
   */
  success?: boolean;
  /**
   *
   * @type {GetCandidate200ResponseData}
   * @memberof GetCandidate200Response
   */
  data?: GetCandidate200ResponseData;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GetCandidate200ResponseData
 */
export interface GetCandidate200ResponseData {
  /**
   *
   * @type {number}
   * @memberof GetCandidate200ResponseData
   */
  candidato_id?: number;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  municipio_nascimento?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  estado_nascimento?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  nome?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  data_nascimento?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  genero?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  raca?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  ocupacao?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  coligacao?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  partido?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  sigla_partido?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  nome_atual?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  class_categ_1?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  class_categ_4?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  class_survey_esp?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  grau_de_instrucao?: string;
  /**
   *
   * @type {number}
   * @memberof GetCandidate200ResponseData
   */
  bens_declarados?: number;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  cidade_nascimento?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  ultimo_cargo?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  ultima_unidade_eleitoral?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidate200ResponseData
   */
  ultima_situacao_candidatura?: string;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200Response
 */
export interface GetCandidateFilters200Response {
  /**
   *
   * @type {boolean}
   * @memberof GetCandidateFilters200Response
   */
  success?: boolean;
  /**
   *
   * @type {GetCandidateFilters200ResponseData}
   * @memberof GetCandidateFilters200Response
   */
  data?: GetCandidateFilters200ResponseData;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200ResponseData
 */
export interface GetCandidateFilters200ResponseData {
  /**
   *
   * @type {GetCandidateFilters200ResponseDataCargo}
   * @memberof GetCandidateFilters200ResponseData
   */
  cargo?: GetCandidateFilters200ResponseDataCargo;
  /**
   *
   * @type {GetCandidateFilters200ResponseDataFoiEleito}
   * @memberof GetCandidateFilters200ResponseData
   */
  foiEleito?: GetCandidateFilters200ResponseDataFoiEleito;
  /**
   *
   * @type {GetCandidateFilters200ResponseDataGenero}
   * @memberof GetCandidateFilters200ResponseData
   */
  genero?: GetCandidateFilters200ResponseDataGenero;
  /**
   *
   * @type {GetCandidateFilters200ResponseDataEstado}
   * @memberof GetCandidateFilters200ResponseData
   */
  estado?: GetCandidateFilters200ResponseDataEstado;
  /**
   *
   * @type {GetCandidateFilters200ResponseDataCategorias}
   * @memberof GetCandidateFilters200ResponseData
   */
  categorias?: GetCandidateFilters200ResponseDataCategorias;
  /**
   *
   * @type {GetCandidateFilters200ResponseDataPartidos}
   * @memberof GetCandidateFilters200ResponseData
   */
  partidos?: GetCandidateFilters200ResponseDataPartidos;
  /**
   *
   * @type {GetCandidateFilters200ResponseDataFoiEleito}
   * @memberof GetCandidateFilters200ResponseData
   */
  possibilities?: GetCandidateFilters200ResponseDataFoiEleito;
  /**
   *
   * @type {GetCandidateFilters200ResponseDataAnos}
   * @memberof GetCandidateFilters200ResponseData
   */
  anos?: GetCandidateFilters200ResponseDataAnos;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200ResponseDataAnos
 */
export interface GetCandidateFilters200ResponseDataAnos {
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataAnos
   */
  type?: string;
  /**
   *
   * @type {Array<number>}
   * @memberof GetCandidateFilters200ResponseDataAnos
   */
  values?: Array<number>;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200ResponseDataCargo
 */
export interface GetCandidateFilters200ResponseDataCargo {
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataCargo
   */
  type?: string;
  /**
   *
   * @type {Array<GetCandidateFilters200ResponseDataCargoValuesInner>}
   * @memberof GetCandidateFilters200ResponseDataCargo
   */
  values?: Array<GetCandidateFilters200ResponseDataCargoValuesInner>;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200ResponseDataCargoValuesInner
 */
export interface GetCandidateFilters200ResponseDataCargoValuesInner {
  /**
   *
   * @type {number}
   * @memberof GetCandidateFilters200ResponseDataCargoValuesInner
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataCargoValuesInner
   */
  nome_cargo?: string;
  /**
   *
   * @type {number}
   * @memberof GetCandidateFilters200ResponseDataCargoValuesInner
   */
  abrangenciumId?: number;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200ResponseDataCategorias
 */
export interface GetCandidateFilters200ResponseDataCategorias {
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataCategorias
   */
  type?: string;
  /**
   *
   * @type {Array<GetCandidateFilters200ResponseDataCategoriasValuesInner>}
   * @memberof GetCandidateFilters200ResponseDataCategorias
   */
  values?: Array<GetCandidateFilters200ResponseDataCategoriasValuesInner>;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200ResponseDataCategoriasValuesInner
 */
export interface GetCandidateFilters200ResponseDataCategoriasValuesInner {
  /**
   *
   * @type {number}
   * @memberof GetCandidateFilters200ResponseDataCategoriasValuesInner
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataCategoriasValuesInner
   */
  nome?: string;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200ResponseDataEstado
 */
export interface GetCandidateFilters200ResponseDataEstado {
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataEstado
   */
  type?: string;
  /**
   *
   * @type {Array<GetCandidateFilters200ResponseDataEstadoValuesInner>}
   * @memberof GetCandidateFilters200ResponseDataEstado
   */
  values?: Array<GetCandidateFilters200ResponseDataEstadoValuesInner>;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200ResponseDataEstadoValuesInner
 */
export interface GetCandidateFilters200ResponseDataEstadoValuesInner {
  /**
   *
   * @type {number}
   * @memberof GetCandidateFilters200ResponseDataEstadoValuesInner
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataEstadoValuesInner
   */
  sigla_unidade_eleitoral?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataEstadoValuesInner
   */
  nome?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataEstadoValuesInner
   */
  sigla_unidade_federacao?: string;
  /**
   *
   * @type {number}
   * @memberof GetCandidateFilters200ResponseDataEstadoValuesInner
   */
  codigo_ibge?: number | null;
  /**
   *
   * @type {number}
   * @memberof GetCandidateFilters200ResponseDataEstadoValuesInner
   */
  abrangenciumId?: number;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200ResponseDataFoiEleito
 */
export interface GetCandidateFilters200ResponseDataFoiEleito {
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataFoiEleito
   */
  type?: string;
  /**
   *
   * @type {Array<GetCandidateFilters200ResponseDataFoiEleitoValuesInner>}
   * @memberof GetCandidateFilters200ResponseDataFoiEleito
   */
  values?: Array<GetCandidateFilters200ResponseDataFoiEleitoValuesInner>;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200ResponseDataFoiEleitoValuesInner
 */
export interface GetCandidateFilters200ResponseDataFoiEleitoValuesInner {
  /**
   *
   * @type {number}
   * @memberof GetCandidateFilters200ResponseDataFoiEleitoValuesInner
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataFoiEleitoValuesInner
   */
  label?: string;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200ResponseDataGenero
 */
export interface GetCandidateFilters200ResponseDataGenero {
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataGenero
   */
  type?: string;
  /**
   *
   * @type {Array<GetCandidateFilters200ResponseDataGeneroValuesInner>}
   * @memberof GetCandidateFilters200ResponseDataGenero
   */
  values?: Array<GetCandidateFilters200ResponseDataGeneroValuesInner>;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200ResponseDataGeneroValuesInner
 */
export interface GetCandidateFilters200ResponseDataGeneroValuesInner {
  /**
   *
   * @type {number}
   * @memberof GetCandidateFilters200ResponseDataGeneroValuesInner
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataGeneroValuesInner
   */
  nome_genero?: string;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200ResponseDataPartidos
 */
export interface GetCandidateFilters200ResponseDataPartidos {
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataPartidos
   */
  type?: string;
  /**
   *
   * @type {Array<GetCandidateFilters200ResponseDataPartidosValuesInner>}
   * @memberof GetCandidateFilters200ResponseDataPartidos
   */
  values?: Array<GetCandidateFilters200ResponseDataPartidosValuesInner>;
}
/**
 *
 * @export
 * @interface GetCandidateFilters200ResponseDataPartidosValuesInner
 */
export interface GetCandidateFilters200ResponseDataPartidosValuesInner {
  /**
   *
   * @type {number}
   * @memberof GetCandidateFilters200ResponseDataPartidosValuesInner
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataPartidosValuesInner
   */
  sigla?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataPartidosValuesInner
   */
  nome?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataPartidosValuesInner
   */
  nome_atual?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataPartidosValuesInner
   */
  class_categ_1?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataPartidosValuesInner
   */
  class_categ_4?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters200ResponseDataPartidosValuesInner
   */
  class_survey_esp?: string;
}
/**
 *
 * @export
 * @interface GetCandidateFilters500Response
 */
export interface GetCandidateFilters500Response {
  /**
   *
   * @type {boolean}
   * @memberof GetCandidateFilters500Response
   */
  success?: boolean;
  /**
   *
   * @type {object}
   * @memberof GetCandidateFilters500Response
   */
  data?: object;
  /**
   *
   * @type {string}
   * @memberof GetCandidateFilters500Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GetCandidateLastElectionVoteByRegion200Response
 */
export interface GetCandidateLastElectionVoteByRegion200Response {
  /**
   *
   * @type {boolean}
   * @memberof GetCandidateLastElectionVoteByRegion200Response
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof GetCandidateLastElectionVoteByRegion200Response
   */
  message?: string;
  /**
   *
   * @type {Array<GetCandidateLastElectionVoteByRegion200ResponseDataInner>}
   * @memberof GetCandidateLastElectionVoteByRegion200Response
   */
  data?: Array<GetCandidateLastElectionVoteByRegion200ResponseDataInner>;
}
/**
 *
 * @export
 * @interface GetCandidateLastElectionVoteByRegion200ResponseDataInner
 */
export interface GetCandidateLastElectionVoteByRegion200ResponseDataInner {
  /**
   *
   * @type {string}
   * @memberof GetCandidateLastElectionVoteByRegion200ResponseDataInner
   */
  municipio?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidateLastElectionVoteByRegion200ResponseDataInner
   */
  codigo_ibge?: string;
  /**
   *
   * @type {number}
   * @memberof GetCandidateLastElectionVoteByRegion200ResponseDataInner
   */
  votos?: number;
}
/**
 *
 * @export
 * @interface GetCandidateLastFiveElectionVotes200Response
 */
export interface GetCandidateLastFiveElectionVotes200Response {
  /**
   *
   * @type {boolean}
   * @memberof GetCandidateLastFiveElectionVotes200Response
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof GetCandidateLastFiveElectionVotes200Response
   */
  message?: string;
  /**
   *
   * @type {Array<GetCandidateLastFiveElectionVotes200ResponseDataInner>}
   * @memberof GetCandidateLastFiveElectionVotes200Response
   */
  data?: Array<GetCandidateLastFiveElectionVotes200ResponseDataInner>;
}
/**
 *
 * @export
 * @interface GetCandidateLastFiveElectionVotes200ResponseDataInner
 */
export interface GetCandidateLastFiveElectionVotes200ResponseDataInner {
  /**
   *
   * @type {number}
   * @memberof GetCandidateLastFiveElectionVotes200ResponseDataInner
   */
  ano_eleicao?: number;
  /**
   *
   * @type {number}
   * @memberof GetCandidateLastFiveElectionVotes200ResponseDataInner
   */
  total_votos?: number;
}
/**
 *
 * @export
 * @interface GetCandidateLastFiveElectionVotes500Response
 */
export interface GetCandidateLastFiveElectionVotes500Response {
  /**
   *
   * @type {boolean}
   * @memberof GetCandidateLastFiveElectionVotes500Response
   */
  success?: boolean;
  /**
   *
   * @type {object}
   * @memberof GetCandidateLastFiveElectionVotes500Response
   */
  data?: object;
  /**
   *
   * @type {string}
   * @memberof GetCandidateLastFiveElectionVotes500Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GetCandidateProfileByYear200Response
 */
export interface GetCandidateProfileByYear200Response {
  /**
   *
   * @type {boolean}
   * @memberof GetCandidateProfileByYear200Response
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof GetCandidateProfileByYear200Response
   */
  message?: string;
  /**
   *
   * @type {Array<GetCandidateProfileByYear200ResponseDataInner>}
   * @memberof GetCandidateProfileByYear200Response
   */
  data?: Array<GetCandidateProfileByYear200ResponseDataInner>;
}
/**
 *
 * @export
 * @interface GetCandidateProfileByYear200ResponseDataInner
 */
export interface GetCandidateProfileByYear200ResponseDataInner {
  /**
   *
   * @type {number}
   * @memberof GetCandidateProfileByYear200ResponseDataInner
   */
  ano?: number;
}
/**
 *
 * @export
 * @interface GetCandidates200Response
 */
export interface GetCandidates200Response {
  /**
   * Indica o sucesso da requisição.
   * @type {boolean}
   * @memberof GetCandidates200Response
   */
  success?: boolean;
  /**
   *
   * @type {GetCandidates200ResponseData}
   * @memberof GetCandidates200Response
   */
  data?: GetCandidates200ResponseData;
  /**
   *
   * @type {string}
   * @memberof GetCandidates200Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GetCandidates200ResponseData
 */
export interface GetCandidates200ResponseData {
  /**
   * Indica a quantidade de candidatos que foram encontrados com os parâmetros.
   * @type {number}
   * @memberof GetCandidates200ResponseData
   */
  totalResults?: number;
  /**
   * Indica a pagina atual.
   * @type {number}
   * @memberof GetCandidates200ResponseData
   */
  currentPage?: number;
  /**
   * Indica a quantidade total de paginas encontradas.
   * @type {number}
   * @memberof GetCandidates200ResponseData
   */
  totalPages?: number;
  /**
   *
   * @type {Array<GetCandidates200ResponseDataResultsInner>}
   * @memberof GetCandidates200ResponseData
   */
  results?: Array<GetCandidates200ResponseDataResultsInner>;
}
/**
 *
 * @export
 * @interface GetCandidates200ResponseDataResultsInner
 */
export interface GetCandidates200ResponseDataResultsInner {
  /**
   *
   * @type {number}
   * @memberof GetCandidates200ResponseDataResultsInner
   */
  lastCandidatoEleicaoId?: number;
  /**
   *
   * @type {string}
   * @memberof GetCandidates200ResponseDataResultsInner
   */
  partido?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidates200ResponseDataResultsInner
   */
  nomeCandidato?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidates200ResponseDataResultsInner
   */
  situacao?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidates200ResponseDataResultsInner
   */
  cargo?: string;
  /**
   *
   * @type {string}
   * @memberof GetCandidates200ResponseDataResultsInner
   */
  nomeUrna?: string;
  /**
   *
   * @type {number}
   * @memberof GetCandidates200ResponseDataResultsInner
   */
  ultimaEleicao?: number;
  /**
   *
   * @type {number}
   * @memberof GetCandidates200ResponseDataResultsInner
   */
  candidatoId?: number;
}
/**
 *
 * @export
 * @interface GetCandidates400Response
 */
export interface GetCandidates400Response {
  /**
   *
   * @type {boolean}
   * @memberof GetCandidates400Response
   */
  success?: boolean;
  /**
   *
   * @type {object}
   * @memberof GetCandidates400Response
   */
  data?: object;
  /**
   *
   * @type {string}
   * @memberof GetCandidates400Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GetCandidates500Response
 */
export interface GetCandidates500Response {
  /**
   *
   * @type {boolean}
   * @memberof GetCandidates500Response
   */
  success?: boolean;
  /**
   *
   * @type {object}
   * @memberof GetCandidates500Response
   */
  data?: object;
  /**
   *
   * @type {string}
   * @memberof GetCandidates500Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GetElectoralUnit200Response
 */
export interface GetElectoralUnit200Response {
  /**
   * Indica se a operação foi bem-sucedida.
   * @type {boolean}
   * @memberof GetElectoralUnit200Response
   */
  success?: boolean;
  /**
   * Mensagem de sucesso.
   * @type {string}
   * @memberof GetElectoralUnit200Response
   */
  message?: string;
  /**
   *
   * @type {Array<GetElectoralUnit200ResponseDataInner>}
   * @memberof GetElectoralUnit200Response
   */
  data?: Array<GetElectoralUnit200ResponseDataInner>;
}
/**
 *
 * @export
 * @interface GetElectoralUnit200ResponseDataInner
 */
export interface GetElectoralUnit200ResponseDataInner {
  /**
   * ID da unidade eleitoral.
   * @type {number}
   * @memberof GetElectoralUnit200ResponseDataInner
   */
  id?: number;
  /**
   * Nome da unidade eleitoral.
   * @type {string}
   * @memberof GetElectoralUnit200ResponseDataInner
   */
  nome?: string;
}
/**
 *
 * @export
 * @interface GetElectoralUnit500Response
 */
export interface GetElectoralUnit500Response {
  /**
   * Indica se a operação foi bem-sucedida.
   * @type {boolean}
   * @memberof GetElectoralUnit500Response
   */
  success?: boolean;
  /**
   * Mensagem de erro.
   * @type {string}
   * @memberof GetElectoralUnit500Response
   */
  message?: string;
  /**
   * Detalhes do erro.
   * @type {string}
   * @memberof GetElectoralUnit500Response
   */
  data?: string;
}
/**
 *
 * @export
 * @interface GetUfs200Response
 */
export interface GetUfs200Response {
  /**
   * Indica se a operação foi bem-sucedida.
   * @type {boolean}
   * @memberof GetUfs200Response
   */
  success?: boolean;
  /**
   * Mensagem de sucesso.
   * @type {string}
   * @memberof GetUfs200Response
   */
  message?: string;
  /**
   *
   * @type {Array<GetUfs200ResponseDataInner>}
   * @memberof GetUfs200Response
   */
  data?: Array<GetUfs200ResponseDataInner>;
}
/**
 *
 * @export
 * @interface GetUfs200ResponseDataInner
 */
export interface GetUfs200ResponseDataInner {
  /**
   * Nome da unidade federativa.
   * @type {string}
   * @memberof GetUfs200ResponseDataInner
   */
  sigla_unidade_eleitoral?: string;
}
/**
 *
 * @export
 * @interface GetUfs400Response
 */
export interface GetUfs400Response {
  /**
   * Indica se a operação foi bem-sucedida.
   * @type {boolean}
   * @memberof GetUfs400Response
   */
  success?: boolean;
  /**
   * Mensagem de erro caso escolha abrangencia 2 e nao envie estado.
   * @type {string}
   * @memberof GetUfs400Response
   */
  message?: string;
  /**
   * Detalhes do erro.
   * @type {object}
   * @memberof GetUfs400Response
   */
  data?: object;
}

/**
 * AbrangencyApi - axios parameter creator
 * @export
 */
export const AbrangencyApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Retorna as abrangências disponíveis para candidatos.
     * @summary Obter abrangências disponíveis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAbrangency: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/noauth/abrangency`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AbrangencyApi - functional programming interface
 * @export
 */
export const AbrangencyApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AbrangencyApiAxiosParamCreator(configuration);
  return {
    /**
     * Retorna as abrangências disponíveis para candidatos.
     * @summary Obter abrangências disponíveis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAbrangency(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAbrangency200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAbrangency(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['AbrangencyApi.getAbrangency']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AbrangencyApi - factory interface
 * @export
 */
export const AbrangencyApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AbrangencyApiFp(configuration);
  return {
    /**
     * Retorna as abrangências disponíveis para candidatos.
     * @summary Obter abrangências disponíveis
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAbrangency(options?: any): AxiosPromise<GetAbrangency200Response> {
      return localVarFp.getAbrangency(options).then(request => request(axios, basePath));
    },
  };
};

/**
 * AbrangencyApi - object-oriented interface
 * @export
 * @class AbrangencyApi
 * @extends {BaseAPI}
 */
export class AbrangencyApi extends BaseAPI {
  /**
   * Retorna as abrangências disponíveis para candidatos.
   * @summary Obter abrangências disponíveis
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AbrangencyApi
   */
  public getAbrangency(options?: RawAxiosRequestConfig) {
    return AbrangencyApiFp(this.configuration)
      .getAbrangency(options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * CandidateApi - axios parameter creator
 * @export
 */
export const CandidateApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Busca candidato com base no id
     * @summary Detalhe de candidato pelo id
     * @param {string} candidatoId Id do candidato para detalhe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidate: async (candidatoId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'candidatoId' is not null or undefined
      assertParamExists('getCandidate', 'candidatoId', candidatoId);
      const localVarPath = `/noauth/candidate/detail/{candidatoId}`.replace(
        `{${'candidatoId'}}`,
        encodeURIComponent(String(candidatoId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Busca candidato com base no id
     * @summary Votos por cidade da ultima eleicao do candidato
     * @param {string} candidatoId Id do candidato para detalhe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidateLastElectionVoteByRegion: async (
      candidatoId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'candidatoId' is not null or undefined
      assertParamExists('getCandidateLastElectionVoteByRegion', 'candidatoId', candidatoId);
      const localVarPath = `/noauth/candidate/last-election-votes-by-region/{candidatoId}`.replace(
        `{${'candidatoId'}}`,
        encodeURIComponent(String(candidatoId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Busca votos das ultimas 5 eleicoes do candidato com base no id
     * @summary Votos por ano das ultimas 5 eleicoes do candidato
     * @param {string} candidatoId Id do candidato para detalhe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidateLastFiveElectionVotes: async (
      candidatoId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'candidatoId' is not null or undefined
      assertParamExists('getCandidateLastFiveElectionVotes', 'candidatoId', candidatoId);
      const localVarPath = `/noauth/candidate/get-last-5-last-elections-votes/{candidatoId}`.replace(
        `{${'candidatoId'}}`,
        encodeURIComponent(String(candidatoId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Busca candidatos com base em parâmetros como nome, UF, abrangência, unidade eleitoral e página.
     * @summary Busca candidatos
     * @param {string} [name] Nome ou nome de urna do candidato
     * @param {string} [uF] Unidade Federativa
     * @param {string} [abrangencyId] ID da abrangência
     * @param {string} [electoralUnitId] ID da unidade eleitoral
     * @param {number} [page] Número da página para paginação
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidates: async (
      name?: string,
      uF?: string,
      abrangencyId?: string,
      electoralUnitId?: string,
      page?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/noauth/candidate`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (name !== undefined) {
        localVarQueryParameter['name'] = name;
      }

      if (uF !== undefined) {
        localVarQueryParameter['UF'] = uF;
      }

      if (abrangencyId !== undefined) {
        localVarQueryParameter['abrangencyId'] = abrangencyId;
      }

      if (electoralUnitId !== undefined) {
        localVarQueryParameter['electoralUnitId'] = electoralUnitId;
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CandidateApi - functional programming interface
 * @export
 */
export const CandidateApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CandidateApiAxiosParamCreator(configuration);
  return {
    /**
     * Busca candidato com base no id
     * @summary Detalhe de candidato pelo id
     * @param {string} candidatoId Id do candidato para detalhe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCandidate(
      candidatoId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCandidate200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidate(candidatoId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CandidateApi.getCandidate']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Busca candidato com base no id
     * @summary Votos por cidade da ultima eleicao do candidato
     * @param {string} candidatoId Id do candidato para detalhe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCandidateLastElectionVoteByRegion(
      candidatoId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetCandidateLastElectionVoteByRegion200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidateLastElectionVoteByRegion(
        candidatoId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CandidateApi.getCandidateLastElectionVoteByRegion']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Busca votos das ultimas 5 eleicoes do candidato com base no id
     * @summary Votos por ano das ultimas 5 eleicoes do candidato
     * @param {string} candidatoId Id do candidato para detalhe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCandidateLastFiveElectionVotes(
      candidatoId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCandidateLastFiveElectionVotes200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidateLastFiveElectionVotes(
        candidatoId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CandidateApi.getCandidateLastFiveElectionVotes']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Busca candidatos com base em parâmetros como nome, UF, abrangência, unidade eleitoral e página.
     * @summary Busca candidatos
     * @param {string} [name] Nome ou nome de urna do candidato
     * @param {string} [uF] Unidade Federativa
     * @param {string} [abrangencyId] ID da abrangência
     * @param {string} [electoralUnitId] ID da unidade eleitoral
     * @param {number} [page] Número da página para paginação
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCandidates(
      name?: string,
      uF?: string,
      abrangencyId?: string,
      electoralUnitId?: string,
      page?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCandidates200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidates(
        name,
        uF,
        abrangencyId,
        electoralUnitId,
        page,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['CandidateApi.getCandidates']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * CandidateApi - factory interface
 * @export
 */
export const CandidateApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = CandidateApiFp(configuration);
  return {
    /**
     * Busca candidato com base no id
     * @summary Detalhe de candidato pelo id
     * @param {string} candidatoId Id do candidato para detalhe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidate(candidatoId: string, options?: any): AxiosPromise<GetCandidate200Response> {
      return localVarFp.getCandidate(candidatoId, options).then(request => request(axios, basePath));
    },
    /**
     * Busca candidato com base no id
     * @summary Votos por cidade da ultima eleicao do candidato
     * @param {string} candidatoId Id do candidato para detalhe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidateLastElectionVoteByRegion(
      candidatoId: string,
      options?: any,
    ): AxiosPromise<GetCandidateLastElectionVoteByRegion200Response> {
      return localVarFp
        .getCandidateLastElectionVoteByRegion(candidatoId, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Busca votos das ultimas 5 eleicoes do candidato com base no id
     * @summary Votos por ano das ultimas 5 eleicoes do candidato
     * @param {string} candidatoId Id do candidato para detalhe
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidateLastFiveElectionVotes(
      candidatoId: string,
      options?: any,
    ): AxiosPromise<GetCandidateLastFiveElectionVotes200Response> {
      return localVarFp
        .getCandidateLastFiveElectionVotes(candidatoId, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Busca candidatos com base em parâmetros como nome, UF, abrangência, unidade eleitoral e página.
     * @summary Busca candidatos
     * @param {string} [name] Nome ou nome de urna do candidato
     * @param {string} [uF] Unidade Federativa
     * @param {string} [abrangencyId] ID da abrangência
     * @param {string} [electoralUnitId] ID da unidade eleitoral
     * @param {number} [page] Número da página para paginação
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidates(
      name?: string,
      uF?: string,
      abrangencyId?: string,
      electoralUnitId?: string,
      page?: number,
      options?: any,
    ): AxiosPromise<GetCandidates200Response> {
      return localVarFp
        .getCandidates(name, uF, abrangencyId, electoralUnitId, page, options)
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * CandidateApi - object-oriented interface
 * @export
 * @class CandidateApi
 * @extends {BaseAPI}
 */
export class CandidateApi extends BaseAPI {
  /**
   * Busca candidato com base no id
   * @summary Detalhe de candidato pelo id
   * @param {string} candidatoId Id do candidato para detalhe
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CandidateApi
   */
  public getCandidate(candidatoId: string, options?: RawAxiosRequestConfig) {
    return CandidateApiFp(this.configuration)
      .getCandidate(candidatoId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Busca candidato com base no id
   * @summary Votos por cidade da ultima eleicao do candidato
   * @param {string} candidatoId Id do candidato para detalhe
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CandidateApi
   */
  public getCandidateLastElectionVoteByRegion(candidatoId: string, options?: RawAxiosRequestConfig) {
    return CandidateApiFp(this.configuration)
      .getCandidateLastElectionVoteByRegion(candidatoId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Busca votos das ultimas 5 eleicoes do candidato com base no id
   * @summary Votos por ano das ultimas 5 eleicoes do candidato
   * @param {string} candidatoId Id do candidato para detalhe
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CandidateApi
   */
  public getCandidateLastFiveElectionVotes(candidatoId: string, options?: RawAxiosRequestConfig) {
    return CandidateApiFp(this.configuration)
      .getCandidateLastFiveElectionVotes(candidatoId, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Busca candidatos com base em parâmetros como nome, UF, abrangência, unidade eleitoral e página.
   * @summary Busca candidatos
   * @param {string} [name] Nome ou nome de urna do candidato
   * @param {string} [uF] Unidade Federativa
   * @param {string} [abrangencyId] ID da abrangência
   * @param {string} [electoralUnitId] ID da unidade eleitoral
   * @param {number} [page] Número da página para paginação
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CandidateApi
   */
  public getCandidates(
    name?: string,
    uF?: string,
    abrangencyId?: string,
    electoralUnitId?: string,
    page?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return CandidateApiFp(this.configuration)
      .getCandidates(name, uF, abrangencyId, electoralUnitId, page, options)
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * ConsultApi - axios parameter creator
 * @export
 */
export const ConsultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Retorna os filtros disponíveis para candidatos.
     * @summary Obter filtros de candidatos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidateFilters: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/noauth/candidate/get-filters`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retorna o perfil dos candidatos agrupado por gênero.
     * @summary Perfil dos candidatos por gênero
     * @param {number} initialYear Ano inicial do intervalo.
     * @param {number} finalYear Ano final do intervalo.
     * @param {number} [dimension] Dimensão de agregação (1, 2, 3).
     * @param {Array<string>} [unidadesEleitoraisIds] IDs das unidades eleitorais desejadas.
     * @param {number} [isElected] Situação se foi deleito (0 para ambos, 1, para sim; 2 para não eleitos)
     * @param {Array<string>} [partidos] IDs dos partidos
     * @param {Array<string>} [categoriasOcupacoes] Categoria 1 das ocupações (1,2 ...)
     * @param {Array<string>} [cargosIds] IDs dos cargos (1,2,3...)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidateProfileByGender: async (
      initialYear: number,
      finalYear: number,
      dimension?: number,
      unidadesEleitoraisIds?: Array<string>,
      isElected?: number,
      partidos?: Array<string>,
      categoriasOcupacoes?: Array<string>,
      cargosIds?: Array<string>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'initialYear' is not null or undefined
      assertParamExists('getCandidateProfileByGender', 'initialYear', initialYear);
      // verify required parameter 'finalYear' is not null or undefined
      assertParamExists('getCandidateProfileByGender', 'finalYear', finalYear);
      const localVarPath = `/noauth/cruzamentos/candidates-profile/by-gender`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (initialYear !== undefined) {
        localVarQueryParameter['initialYear'] = initialYear;
      }

      if (finalYear !== undefined) {
        localVarQueryParameter['finalYear'] = finalYear;
      }

      if (dimension !== undefined) {
        localVarQueryParameter['dimension'] = dimension;
      }

      if (unidadesEleitoraisIds) {
        localVarQueryParameter['unidadesEleitoraisIds'] = unidadesEleitoraisIds;
      }

      if (isElected !== undefined) {
        localVarQueryParameter['isElected'] = isElected;
      }

      if (partidos) {
        localVarQueryParameter['partidos'] = partidos;
      }

      if (categoriasOcupacoes) {
        localVarQueryParameter['categoriasOcupacoes'] = categoriasOcupacoes;
      }

      if (cargosIds) {
        localVarQueryParameter['cargosIds'] = cargosIds;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retorna o perfil dos candidatos agrupado por ocupação.
     * @summary Perfil dos candidatos por ocupação
     * @param {number} initialYear Ano inicial do intervalo.
     * @param {number} finalYear Ano final do intervalo.
     * @param {number} [dimension] Dimensão de agregação (1, 2, 3).
     * @param {Array<string>} [unidadesEleitoraisIds] IDs das unidades eleitorais desejadas.
     * @param {number} [isElected] Situação se foi deleito (0 para ambos, 1, para sim; 2 para não eleitos)
     * @param {Array<string>} [partidos] IDs dos partidos
     * @param {Array<string>} [categoriasOcupacoes] Categoria 1 das ocupações (1,2 ...)
     * @param {Array<string>} [cargosIds] IDs dos cargos (1,2,3...)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidateProfileByOccupation: async (
      initialYear: number,
      finalYear: number,
      dimension?: number,
      unidadesEleitoraisIds?: Array<string>,
      isElected?: number,
      partidos?: Array<string>,
      categoriasOcupacoes?: Array<string>,
      cargosIds?: Array<string>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'initialYear' is not null or undefined
      assertParamExists('getCandidateProfileByOccupation', 'initialYear', initialYear);
      // verify required parameter 'finalYear' is not null or undefined
      assertParamExists('getCandidateProfileByOccupation', 'finalYear', finalYear);
      const localVarPath = `/noauth/cruzamentos/candidates-profile/by-occupation`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (initialYear !== undefined) {
        localVarQueryParameter['initialYear'] = initialYear;
      }

      if (finalYear !== undefined) {
        localVarQueryParameter['finalYear'] = finalYear;
      }

      if (dimension !== undefined) {
        localVarQueryParameter['dimension'] = dimension;
      }

      if (unidadesEleitoraisIds) {
        localVarQueryParameter['unidadesEleitoraisIds'] = unidadesEleitoraisIds;
      }

      if (isElected !== undefined) {
        localVarQueryParameter['isElected'] = isElected;
      }

      if (partidos) {
        localVarQueryParameter['partidos'] = partidos;
      }

      if (categoriasOcupacoes) {
        localVarQueryParameter['categoriasOcupacoes'] = categoriasOcupacoes;
      }

      if (cargosIds) {
        localVarQueryParameter['cargosIds'] = cargosIds;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retorna o perfil dos candidatos agrupado por ano.
     * @summary Perfil dos candidatos por ano
     * @param {number} initialYear Ano inicial do intervalo.
     * @param {number} finalYear Ano final do intervalo.
     * @param {number} [dimension] Dimensão de agregação (1, 2, 3).
     * @param {Array<string>} [unidadesEleitoraisIds] IDs das unidades eleitorais desejadas.
     * @param {number} [isElected] Situação se foi deleito (0 para ambos, 1, para sim; 2 para não eleitos)
     * @param {Array<string>} [partidos] IDs dos partidos
     * @param {Array<string>} [categoriasOcupacoes] Categoria 1 das ocupações (1,2 ...)
     * @param {Array<string>} [cargosIds] IDs dos cargos (1,2,3...)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidateProfileByYear: async (
      initialYear: number,
      finalYear: number,
      dimension?: number,
      unidadesEleitoraisIds?: Array<string>,
      isElected?: number,
      partidos?: Array<string>,
      categoriasOcupacoes?: Array<string>,
      cargosIds?: Array<string>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'initialYear' is not null or undefined
      assertParamExists('getCandidateProfileByYear', 'initialYear', initialYear);
      // verify required parameter 'finalYear' is not null or undefined
      assertParamExists('getCandidateProfileByYear', 'finalYear', finalYear);
      const localVarPath = `/noauth/cruzamentos/candidates-profile/by-year`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (initialYear !== undefined) {
        localVarQueryParameter['initialYear'] = initialYear;
      }

      if (finalYear !== undefined) {
        localVarQueryParameter['finalYear'] = finalYear;
      }

      if (dimension !== undefined) {
        localVarQueryParameter['dimension'] = dimension;
      }

      if (unidadesEleitoraisIds) {
        localVarQueryParameter['unidadesEleitoraisIds'] = unidadesEleitoraisIds;
      }

      if (isElected !== undefined) {
        localVarQueryParameter['isElected'] = isElected;
      }

      if (partidos) {
        localVarQueryParameter['partidos'] = partidos;
      }

      if (categoriasOcupacoes) {
        localVarQueryParameter['categoriasOcupacoes'] = categoriasOcupacoes;
      }

      if (cargosIds) {
        localVarQueryParameter['cargosIds'] = cargosIds;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retorna os kpis  do perfil dos candidatos.
     * @summary KPIs para página de cruzamentos Perfil dos candidatos
     * @param {number} initialYear Ano inicial do intervalo.
     * @param {number} finalYear Ano final do intervalo.
     * @param {Array<string>} [unidadesEleitoraisIds] IDs das unidades eleitorais desejadas.
     * @param {number} [isElected] Situação se foi deleito (0 para ambos, 1, para sim; 2 para não eleitos)
     * @param {Array<string>} [partidos] IDs dos partidos
     * @param {Array<string>} [categoriasOcupacoes] Categoria 1 das ocupações (1,2 ...)
     * @param {Array<string>} [cargosIds] IDs dos cargos (1,2,3...)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidateProfileKpis: async (
      initialYear: number,
      finalYear: number,
      unidadesEleitoraisIds?: Array<string>,
      isElected?: number,
      partidos?: Array<string>,
      categoriasOcupacoes?: Array<string>,
      cargosIds?: Array<string>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'initialYear' is not null or undefined
      assertParamExists('getCandidateProfileKpis', 'initialYear', initialYear);
      // verify required parameter 'finalYear' is not null or undefined
      assertParamExists('getCandidateProfileKpis', 'finalYear', finalYear);
      const localVarPath = `/noauth/cruzamentos/candidates-profile/kpis`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (initialYear !== undefined) {
        localVarQueryParameter['initialYear'] = initialYear;
      }

      if (finalYear !== undefined) {
        localVarQueryParameter['finalYear'] = finalYear;
      }

      if (unidadesEleitoraisIds) {
        localVarQueryParameter['unidadesEleitoraisIds'] = unidadesEleitoraisIds;
      }

      if (isElected !== undefined) {
        localVarQueryParameter['isElected'] = isElected;
      }

      if (partidos) {
        localVarQueryParameter['partidos'] = partidos;
      }

      if (categoriasOcupacoes) {
        localVarQueryParameter['categoriasOcupacoes'] = categoriasOcupacoes;
      }

      if (cargosIds) {
        localVarQueryParameter['cargosIds'] = cargosIds;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ConsultApi - functional programming interface
 * @export
 */
export const ConsultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ConsultApiAxiosParamCreator(configuration);
  return {
    /**
     * Retorna os filtros disponíveis para candidatos.
     * @summary Obter filtros de candidatos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCandidateFilters(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCandidateFilters200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidateFilters(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ConsultApi.getCandidateFilters']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retorna o perfil dos candidatos agrupado por gênero.
     * @summary Perfil dos candidatos por gênero
     * @param {number} initialYear Ano inicial do intervalo.
     * @param {number} finalYear Ano final do intervalo.
     * @param {number} [dimension] Dimensão de agregação (1, 2, 3).
     * @param {Array<string>} [unidadesEleitoraisIds] IDs das unidades eleitorais desejadas.
     * @param {number} [isElected] Situação se foi deleito (0 para ambos, 1, para sim; 2 para não eleitos)
     * @param {Array<string>} [partidos] IDs dos partidos
     * @param {Array<string>} [categoriasOcupacoes] Categoria 1 das ocupações (1,2 ...)
     * @param {Array<string>} [cargosIds] IDs dos cargos (1,2,3...)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCandidateProfileByGender(
      initialYear: number,
      finalYear: number,
      dimension?: number,
      unidadesEleitoraisIds?: Array<string>,
      isElected?: number,
      partidos?: Array<string>,
      categoriasOcupacoes?: Array<string>,
      cargosIds?: Array<string>,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidateProfileByGender(
        initialYear,
        finalYear,
        dimension,
        unidadesEleitoraisIds,
        isElected,
        partidos,
        categoriasOcupacoes,
        cargosIds,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ConsultApi.getCandidateProfileByGender']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retorna o perfil dos candidatos agrupado por ocupação.
     * @summary Perfil dos candidatos por ocupação
     * @param {number} initialYear Ano inicial do intervalo.
     * @param {number} finalYear Ano final do intervalo.
     * @param {number} [dimension] Dimensão de agregação (1, 2, 3).
     * @param {Array<string>} [unidadesEleitoraisIds] IDs das unidades eleitorais desejadas.
     * @param {number} [isElected] Situação se foi deleito (0 para ambos, 1, para sim; 2 para não eleitos)
     * @param {Array<string>} [partidos] IDs dos partidos
     * @param {Array<string>} [categoriasOcupacoes] Categoria 1 das ocupações (1,2 ...)
     * @param {Array<string>} [cargosIds] IDs dos cargos (1,2,3...)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCandidateProfileByOccupation(
      initialYear: number,
      finalYear: number,
      dimension?: number,
      unidadesEleitoraisIds?: Array<string>,
      isElected?: number,
      partidos?: Array<string>,
      categoriasOcupacoes?: Array<string>,
      cargosIds?: Array<string>,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidateProfileByOccupation(
        initialYear,
        finalYear,
        dimension,
        unidadesEleitoraisIds,
        isElected,
        partidos,
        categoriasOcupacoes,
        cargosIds,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ConsultApi.getCandidateProfileByOccupation']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retorna o perfil dos candidatos agrupado por ano.
     * @summary Perfil dos candidatos por ano
     * @param {number} initialYear Ano inicial do intervalo.
     * @param {number} finalYear Ano final do intervalo.
     * @param {number} [dimension] Dimensão de agregação (1, 2, 3).
     * @param {Array<string>} [unidadesEleitoraisIds] IDs das unidades eleitorais desejadas.
     * @param {number} [isElected] Situação se foi deleito (0 para ambos, 1, para sim; 2 para não eleitos)
     * @param {Array<string>} [partidos] IDs dos partidos
     * @param {Array<string>} [categoriasOcupacoes] Categoria 1 das ocupações (1,2 ...)
     * @param {Array<string>} [cargosIds] IDs dos cargos (1,2,3...)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCandidateProfileByYear(
      initialYear: number,
      finalYear: number,
      dimension?: number,
      unidadesEleitoraisIds?: Array<string>,
      isElected?: number,
      partidos?: Array<string>,
      categoriasOcupacoes?: Array<string>,
      cargosIds?: Array<string>,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCandidateProfileByYear200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidateProfileByYear(
        initialYear,
        finalYear,
        dimension,
        unidadesEleitoraisIds,
        isElected,
        partidos,
        categoriasOcupacoes,
        cargosIds,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ConsultApi.getCandidateProfileByYear']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retorna os kpis  do perfil dos candidatos.
     * @summary KPIs para página de cruzamentos Perfil dos candidatos
     * @param {number} initialYear Ano inicial do intervalo.
     * @param {number} finalYear Ano final do intervalo.
     * @param {Array<string>} [unidadesEleitoraisIds] IDs das unidades eleitorais desejadas.
     * @param {number} [isElected] Situação se foi deleito (0 para ambos, 1, para sim; 2 para não eleitos)
     * @param {Array<string>} [partidos] IDs dos partidos
     * @param {Array<string>} [categoriasOcupacoes] Categoria 1 das ocupações (1,2 ...)
     * @param {Array<string>} [cargosIds] IDs dos cargos (1,2,3...)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCandidateProfileKpis(
      initialYear: number,
      finalYear: number,
      unidadesEleitoraisIds?: Array<string>,
      isElected?: number,
      partidos?: Array<string>,
      categoriasOcupacoes?: Array<string>,
      cargosIds?: Array<string>,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCandidateProfileKpis(
        initialYear,
        finalYear,
        unidadesEleitoraisIds,
        isElected,
        partidos,
        categoriasOcupacoes,
        cargosIds,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ConsultApi.getCandidateProfileKpis']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ConsultApi - factory interface
 * @export
 */
export const ConsultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ConsultApiFp(configuration);
  return {
    /**
     * Retorna os filtros disponíveis para candidatos.
     * @summary Obter filtros de candidatos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidateFilters(options?: any): AxiosPromise<GetCandidateFilters200Response> {
      return localVarFp.getCandidateFilters(options).then(request => request(axios, basePath));
    },
    /**
     * Retorna o perfil dos candidatos agrupado por gênero.
     * @summary Perfil dos candidatos por gênero
     * @param {number} initialYear Ano inicial do intervalo.
     * @param {number} finalYear Ano final do intervalo.
     * @param {number} [dimension] Dimensão de agregação (1, 2, 3).
     * @param {Array<string>} [unidadesEleitoraisIds] IDs das unidades eleitorais desejadas.
     * @param {number} [isElected] Situação se foi deleito (0 para ambos, 1, para sim; 2 para não eleitos)
     * @param {Array<string>} [partidos] IDs dos partidos
     * @param {Array<string>} [categoriasOcupacoes] Categoria 1 das ocupações (1,2 ...)
     * @param {Array<string>} [cargosIds] IDs dos cargos (1,2,3...)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidateProfileByGender(
      initialYear: number,
      finalYear: number,
      dimension?: number,
      unidadesEleitoraisIds?: Array<string>,
      isElected?: number,
      partidos?: Array<string>,
      categoriasOcupacoes?: Array<string>,
      cargosIds?: Array<string>,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .getCandidateProfileByGender(
          initialYear,
          finalYear,
          dimension,
          unidadesEleitoraisIds,
          isElected,
          partidos,
          categoriasOcupacoes,
          cargosIds,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     * Retorna o perfil dos candidatos agrupado por ocupação.
     * @summary Perfil dos candidatos por ocupação
     * @param {number} initialYear Ano inicial do intervalo.
     * @param {number} finalYear Ano final do intervalo.
     * @param {number} [dimension] Dimensão de agregação (1, 2, 3).
     * @param {Array<string>} [unidadesEleitoraisIds] IDs das unidades eleitorais desejadas.
     * @param {number} [isElected] Situação se foi deleito (0 para ambos, 1, para sim; 2 para não eleitos)
     * @param {Array<string>} [partidos] IDs dos partidos
     * @param {Array<string>} [categoriasOcupacoes] Categoria 1 das ocupações (1,2 ...)
     * @param {Array<string>} [cargosIds] IDs dos cargos (1,2,3...)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidateProfileByOccupation(
      initialYear: number,
      finalYear: number,
      dimension?: number,
      unidadesEleitoraisIds?: Array<string>,
      isElected?: number,
      partidos?: Array<string>,
      categoriasOcupacoes?: Array<string>,
      cargosIds?: Array<string>,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .getCandidateProfileByOccupation(
          initialYear,
          finalYear,
          dimension,
          unidadesEleitoraisIds,
          isElected,
          partidos,
          categoriasOcupacoes,
          cargosIds,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     * Retorna o perfil dos candidatos agrupado por ano.
     * @summary Perfil dos candidatos por ano
     * @param {number} initialYear Ano inicial do intervalo.
     * @param {number} finalYear Ano final do intervalo.
     * @param {number} [dimension] Dimensão de agregação (1, 2, 3).
     * @param {Array<string>} [unidadesEleitoraisIds] IDs das unidades eleitorais desejadas.
     * @param {number} [isElected] Situação se foi deleito (0 para ambos, 1, para sim; 2 para não eleitos)
     * @param {Array<string>} [partidos] IDs dos partidos
     * @param {Array<string>} [categoriasOcupacoes] Categoria 1 das ocupações (1,2 ...)
     * @param {Array<string>} [cargosIds] IDs dos cargos (1,2,3...)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidateProfileByYear(
      initialYear: number,
      finalYear: number,
      dimension?: number,
      unidadesEleitoraisIds?: Array<string>,
      isElected?: number,
      partidos?: Array<string>,
      categoriasOcupacoes?: Array<string>,
      cargosIds?: Array<string>,
      options?: any,
    ): AxiosPromise<GetCandidateProfileByYear200Response> {
      return localVarFp
        .getCandidateProfileByYear(
          initialYear,
          finalYear,
          dimension,
          unidadesEleitoraisIds,
          isElected,
          partidos,
          categoriasOcupacoes,
          cargosIds,
          options,
        )
        .then(request => request(axios, basePath));
    },
    /**
     * Retorna os kpis  do perfil dos candidatos.
     * @summary KPIs para página de cruzamentos Perfil dos candidatos
     * @param {number} initialYear Ano inicial do intervalo.
     * @param {number} finalYear Ano final do intervalo.
     * @param {Array<string>} [unidadesEleitoraisIds] IDs das unidades eleitorais desejadas.
     * @param {number} [isElected] Situação se foi deleito (0 para ambos, 1, para sim; 2 para não eleitos)
     * @param {Array<string>} [partidos] IDs dos partidos
     * @param {Array<string>} [categoriasOcupacoes] Categoria 1 das ocupações (1,2 ...)
     * @param {Array<string>} [cargosIds] IDs dos cargos (1,2,3...)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCandidateProfileKpis(
      initialYear: number,
      finalYear: number,
      unidadesEleitoraisIds?: Array<string>,
      isElected?: number,
      partidos?: Array<string>,
      categoriasOcupacoes?: Array<string>,
      cargosIds?: Array<string>,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .getCandidateProfileKpis(
          initialYear,
          finalYear,
          unidadesEleitoraisIds,
          isElected,
          partidos,
          categoriasOcupacoes,
          cargosIds,
          options,
        )
        .then(request => request(axios, basePath));
    },
  };
};

/**
 * ConsultApi - object-oriented interface
 * @export
 * @class ConsultApi
 * @extends {BaseAPI}
 */
export class ConsultApi extends BaseAPI {
  /**
   * Retorna os filtros disponíveis para candidatos.
   * @summary Obter filtros de candidatos
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsultApi
   */
  public getCandidateFilters(options?: RawAxiosRequestConfig) {
    return ConsultApiFp(this.configuration)
      .getCandidateFilters(options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Retorna o perfil dos candidatos agrupado por gênero.
   * @summary Perfil dos candidatos por gênero
   * @param {number} initialYear Ano inicial do intervalo.
   * @param {number} finalYear Ano final do intervalo.
   * @param {number} [dimension] Dimensão de agregação (1, 2, 3).
   * @param {Array<string>} [unidadesEleitoraisIds] IDs das unidades eleitorais desejadas.
   * @param {number} [isElected] Situação se foi deleito (0 para ambos, 1, para sim; 2 para não eleitos)
   * @param {Array<string>} [partidos] IDs dos partidos
   * @param {Array<string>} [categoriasOcupacoes] Categoria 1 das ocupações (1,2 ...)
   * @param {Array<string>} [cargosIds] IDs dos cargos (1,2,3...)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsultApi
   */
  public getCandidateProfileByGender(
    initialYear: number,
    finalYear: number,
    dimension?: number,
    unidadesEleitoraisIds?: Array<string>,
    isElected?: number,
    partidos?: Array<string>,
    categoriasOcupacoes?: Array<string>,
    cargosIds?: Array<string>,
    options?: RawAxiosRequestConfig,
  ) {
    return ConsultApiFp(this.configuration)
      .getCandidateProfileByGender(
        initialYear,
        finalYear,
        dimension,
        unidadesEleitoraisIds,
        isElected,
        partidos,
        categoriasOcupacoes,
        cargosIds,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Retorna o perfil dos candidatos agrupado por ocupação.
   * @summary Perfil dos candidatos por ocupação
   * @param {number} initialYear Ano inicial do intervalo.
   * @param {number} finalYear Ano final do intervalo.
   * @param {number} [dimension] Dimensão de agregação (1, 2, 3).
   * @param {Array<string>} [unidadesEleitoraisIds] IDs das unidades eleitorais desejadas.
   * @param {number} [isElected] Situação se foi deleito (0 para ambos, 1, para sim; 2 para não eleitos)
   * @param {Array<string>} [partidos] IDs dos partidos
   * @param {Array<string>} [categoriasOcupacoes] Categoria 1 das ocupações (1,2 ...)
   * @param {Array<string>} [cargosIds] IDs dos cargos (1,2,3...)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsultApi
   */
  public getCandidateProfileByOccupation(
    initialYear: number,
    finalYear: number,
    dimension?: number,
    unidadesEleitoraisIds?: Array<string>,
    isElected?: number,
    partidos?: Array<string>,
    categoriasOcupacoes?: Array<string>,
    cargosIds?: Array<string>,
    options?: RawAxiosRequestConfig,
  ) {
    return ConsultApiFp(this.configuration)
      .getCandidateProfileByOccupation(
        initialYear,
        finalYear,
        dimension,
        unidadesEleitoraisIds,
        isElected,
        partidos,
        categoriasOcupacoes,
        cargosIds,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Retorna o perfil dos candidatos agrupado por ano.
   * @summary Perfil dos candidatos por ano
   * @param {number} initialYear Ano inicial do intervalo.
   * @param {number} finalYear Ano final do intervalo.
   * @param {number} [dimension] Dimensão de agregação (1, 2, 3).
   * @param {Array<string>} [unidadesEleitoraisIds] IDs das unidades eleitorais desejadas.
   * @param {number} [isElected] Situação se foi deleito (0 para ambos, 1, para sim; 2 para não eleitos)
   * @param {Array<string>} [partidos] IDs dos partidos
   * @param {Array<string>} [categoriasOcupacoes] Categoria 1 das ocupações (1,2 ...)
   * @param {Array<string>} [cargosIds] IDs dos cargos (1,2,3...)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsultApi
   */
  public getCandidateProfileByYear(
    initialYear: number,
    finalYear: number,
    dimension?: number,
    unidadesEleitoraisIds?: Array<string>,
    isElected?: number,
    partidos?: Array<string>,
    categoriasOcupacoes?: Array<string>,
    cargosIds?: Array<string>,
    options?: RawAxiosRequestConfig,
  ) {
    return ConsultApiFp(this.configuration)
      .getCandidateProfileByYear(
        initialYear,
        finalYear,
        dimension,
        unidadesEleitoraisIds,
        isElected,
        partidos,
        categoriasOcupacoes,
        cargosIds,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Retorna os kpis  do perfil dos candidatos.
   * @summary KPIs para página de cruzamentos Perfil dos candidatos
   * @param {number} initialYear Ano inicial do intervalo.
   * @param {number} finalYear Ano final do intervalo.
   * @param {Array<string>} [unidadesEleitoraisIds] IDs das unidades eleitorais desejadas.
   * @param {number} [isElected] Situação se foi deleito (0 para ambos, 1, para sim; 2 para não eleitos)
   * @param {Array<string>} [partidos] IDs dos partidos
   * @param {Array<string>} [categoriasOcupacoes] Categoria 1 das ocupações (1,2 ...)
   * @param {Array<string>} [cargosIds] IDs dos cargos (1,2,3...)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConsultApi
   */
  public getCandidateProfileKpis(
    initialYear: number,
    finalYear: number,
    unidadesEleitoraisIds?: Array<string>,
    isElected?: number,
    partidos?: Array<string>,
    categoriasOcupacoes?: Array<string>,
    cargosIds?: Array<string>,
    options?: RawAxiosRequestConfig,
  ) {
    return ConsultApiFp(this.configuration)
      .getCandidateProfileKpis(
        initialYear,
        finalYear,
        unidadesEleitoraisIds,
        isElected,
        partidos,
        categoriasOcupacoes,
        cargosIds,
        options,
      )
      .then(request => request(this.axios, this.basePath));
  }
}

/**
 * ElectoralUnitApi - axios parameter creator
 * @export
 */
export const ElectoralUnitApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Retorna as unidades eleitorais disponíveis para uma determinada abrangência.
     * @summary Obter unidades eleitorais por abrangência
     * @param {number} abrangencyId ID da abrangência.
     * @param {string} [uF] Estado, obrigatório no caso de abrangência municipal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElectoralUnit: async (
      abrangencyId: number,
      uF?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'abrangencyId' is not null or undefined
      assertParamExists('getElectoralUnit', 'abrangencyId', abrangencyId);
      const localVarPath = `/noauth/electoral-unit`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (abrangencyId !== undefined) {
        localVarQueryParameter['abrangencyId'] = abrangencyId;
      }

      if (uF !== undefined) {
        localVarQueryParameter['UF'] = uF;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Retorna todas as unidades federativas.
     * @summary Obter unidades federativas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUfs: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/noauth/electoral-unit/get-ufs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ElectoralUnitApi - functional programming interface
 * @export
 */
export const ElectoralUnitApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ElectoralUnitApiAxiosParamCreator(configuration);
  return {
    /**
     * Retorna as unidades eleitorais disponíveis para uma determinada abrangência.
     * @summary Obter unidades eleitorais por abrangência
     * @param {number} abrangencyId ID da abrangência.
     * @param {string} [uF] Estado, obrigatório no caso de abrangência municipal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getElectoralUnit(
      abrangencyId: number,
      uF?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetElectoralUnit200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getElectoralUnit(abrangencyId, uF, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ElectoralUnitApi.getElectoralUnit']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     * Retorna todas as unidades federativas.
     * @summary Obter unidades federativas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUfs(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUfs200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUfs(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['ElectoralUnitApi.getUfs']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ElectoralUnitApi - factory interface
 * @export
 */
export const ElectoralUnitApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ElectoralUnitApiFp(configuration);
  return {
    /**
     * Retorna as unidades eleitorais disponíveis para uma determinada abrangência.
     * @summary Obter unidades eleitorais por abrangência
     * @param {number} abrangencyId ID da abrangência.
     * @param {string} [uF] Estado, obrigatório no caso de abrangência municipal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getElectoralUnit(
      abrangencyId: number,
      uF?: string,
      options?: any,
    ): AxiosPromise<GetElectoralUnit200Response> {
      return localVarFp.getElectoralUnit(abrangencyId, uF, options).then(request => request(axios, basePath));
    },
    /**
     * Retorna todas as unidades federativas.
     * @summary Obter unidades federativas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUfs(options?: any): AxiosPromise<GetUfs200Response> {
      return localVarFp.getUfs(options).then(request => request(axios, basePath));
    },
  };
};

/**
 * ElectoralUnitApi - object-oriented interface
 * @export
 * @class ElectoralUnitApi
 * @extends {BaseAPI}
 */
export class ElectoralUnitApi extends BaseAPI {
  /**
   * Retorna as unidades eleitorais disponíveis para uma determinada abrangência.
   * @summary Obter unidades eleitorais por abrangência
   * @param {number} abrangencyId ID da abrangência.
   * @param {string} [uF] Estado, obrigatório no caso de abrangência municipal.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElectoralUnitApi
   */
  public getElectoralUnit(abrangencyId: number, uF?: string, options?: RawAxiosRequestConfig) {
    return ElectoralUnitApiFp(this.configuration)
      .getElectoralUnit(abrangencyId, uF, options)
      .then(request => request(this.axios, this.basePath));
  }

  /**
   * Retorna todas as unidades federativas.
   * @summary Obter unidades federativas
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ElectoralUnitApi
   */
  public getUfs(options?: RawAxiosRequestConfig) {
    return ElectoralUnitApiFp(this.configuration)
      .getUfs(options)
      .then(request => request(this.axios, this.basePath));
  }
}
